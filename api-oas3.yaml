openapi: 3.0.0
info:
  title: FeedFlow
  version: 0.3.0
  contact: {}
security:
  - cookieAuth: []
servers:
  - url: 'http://127.0.0.1:8080/api'
    description: Dev server

paths:
  #Feed tagged api ------------------------------------------------
  /feed/request:
    get:
      summary: Return next feed data chunk.
      operationId: requestChunk
      tags:
        - Feed
      parameters:
        - name: pageId
          in: query
          required: true
          schema:
            type: number
            default: '0'
        # Parameter of chunk begin
        - name: since
          in: query
          required: true
          schema:
            type: number
            default: '0'
      responses:
        '200':
          description: Ok.
        '429':
          description: Too many requests.

  #Pages tagged api -----------------------------------------------
  /pages/login:
    post:
      summary: Logs in and returns the authentication cookie
      tags:
        - Pages
      requestBody:
        required: true
        description: A JSON object containing the login and password.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      security: []  # no authentication
      responses:
        '200':
          description: >
            Successfully authenticated.
            The session ID is returned in a cookie named `SESSIONID`. You need to include this cookie in subsequent requests.
          headers: 
            Set-Cookie:
              schema: 
                type: string
                example: SESSIONID=abcde12345; Path=/; HttpOnly

  /pages/signin:
    post:
      summary: Singns in
      tags:
        - Pages
      requestBody:
        required: true
        description: A JSON object containing the login and password.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SigninRequest'
      security: []  # no authentication
      responses:
        '200':
          description: >
            Successfully authenticated.
            The session ID is returned in a cookie named `SESSIONID`. You need to include this cookie in subsequent requests.
          headers: 
            Set-Cookie:
              schema: 
                type: string
                example: SESSIONID=abcde12345; Path=/; HttpOnly
        '406':
          description: Not Acceptable data
  
  /pages/add:
    post:
      summary: Add a new page.
      operationId: add
      tags:
        - Pages
      requestBody:
        content:
          application/x-www-form-urlencoded; charset=utf-8:
            schema:
              $ref: '#/components/schemas/NewPageContent'
      responses:
        '200':
          description: Page has been added.
        '401':
          $ref: '#/components/responses/Unauthorized'
  
  /pages/img/upload/:
    post:
      summary: Upload a new image.
      operationId: imgUpload
      tags:
        - Pages
      requestBody:
        content:
          multipart/form-data:
            schema:
               $ref: '#/components/schemas/UploadImg'
      responses:
        '200':
          description: Image has been uploaded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MD5Hash'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /pages/remove:
    delete:
      summary: Move page to archive.
      operationId: remove
      tags:
          - Pages
      responses:
        '200':
          description: Page has been moved to archive.
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  links: {}
  callbacks: {}

  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    MD5Hash:
      type: string
      minLength: 32
      maxLength: 32

    # Schema for error response body
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message

    # Schema for sign in request body
    SigninRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 2
          maxLength: 32
        password:
          type: string
          minLength: 10
          maxLength: 32
        email:
          type: string
          minLength: 6

    # Schema for log in request body
    LoginRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 2
          maxLength: 32
        password:
          type: string
          minLength: 10
          maxLength: 32

    # Schema for page content created by user
    NewPageContent:
      type: object
      properties:
        title: 
          type: string
          minLength: 2
          maxLength: 256
        mycontent:
          type: string
          minLength: 2
          maxLength: 20000
        tags:
          type: array
          maxLength: 20
      required:
        - title
        - mycontent
        - tags

    # Schema for image uploaded by user
    UploadImg:
      type: object
      properties:
        #md5 hash string of image
        hash:
          $ref: '#/components/schemas/MD5Hash'
        fileName:
          type: string
          format: binary

  securitySchemes:
    CookieAuth:
      type: apiKey
      name: SESSIONID
      in: cookie
  
tags:
  - name: Feed
  - name: Pages